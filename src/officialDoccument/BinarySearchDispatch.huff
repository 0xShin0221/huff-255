
// #include "./data-structures/Hashmap.huff"

// // Define Interface
// #define function allowance(address,address) view returns (uint256)
// #define function approve(address,uint256) nonpayable returns ()
// #define function balanceOf(address) view returns (uint256)
// #define function DOMAIN_SEPARATOR() view returns (bytes32)
// #define function nonces(address) view returns (uint256)
// #define function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) nonpayable returns ()
// #define function totalSupply() view returns (uint256)
// #define function transfer(address,uint256) nonpayable returns ()
// #define function transferFrom(address,address,uint256) nonpayable returns ()
// #define function decimals() nonpayable returns (uint256)
// #define function name() nonpayable returns (string)
// #define function symbol() nonpayable returns (string)

// // Storage Slots
// #define constant OWNER_LOCATION = FREE_STORAGE_POINTER()

// #define macro ALLOWANCE()= takes(0) returns(0){
//     0x24 calldataload
//     0x04 calldataload
//     LOAD_ELEMENT_FROM_KEYS(0x00)    // [value]
//     0x00 mstore                     // []
//     0x20 0x00 return                // []
// }


// /// >>>>>>>>>>>>>>>>>>>>>  EXTERNAL FUNCTIONS  <<<<<<<<<<<<<<<<<<<<<< ///

// /// @notice Approve 
// /// @notice Approves a spender for a specific token
// #define macro APPROVE() = takes (0) returns (0) {
//     // Load the token owner
//     0x24 calldataload dup1   // [tokenId, tokenId]
//     [OWNER_LOCATION]
//     LOAD_ELEMENT_FROM_KEYS(0x00)    // [owner, tokenId]
//     dup1 caller eq                  // [is_sender_owner, owner, tokenId]

//     // Check if approved for all
//     // Store approval
//     // Emit the approval event
// }

// // Function Dispatching
// #define macro MAIN() = takes (1) returns (1) {
//     // Identify which function is being called.
//     // [func sig]
//     0x00 calldataload 0xE0 shr

//     // The function selector of the pivot (number of selectors / 2)
//     dup1 __FUNC_SIG(balanceOf) lt pivot0 jumpi

//         // pivot 2
//         dup1 __FUNC_SIG(totalSupply) lt pivot00 jumpi

//             // 1
//             dup1 __FUNC_SIG(name)               eq nameJump             jumpi

//             // 2
//             dup1 __FUNC_SIG(approve)            eq approveJump          jumpi

//             // 3
//             dup1 __FUNC_SIG(totalSupply)        eq totalSupplyJump      jumpi

//             not_found jump

//         pivot00:

//             // 4
//             dup1 __FUNC_SIG(transferFrom)       eq transferFromJump     jumpi

//             // 5
//             dup1 __FUNC_SIG(decimals)           eq decimalsJump         jumpi

//             // 6
//             dup1 __FUNC_SIG(DOMAIN_SEPARATOR)   eq domainSeparatorJump  jumpi

//             not_found jump

//     pivot0:

//         dup1 __FUNC_SIG(symbol) lt pivot11 jumpi


//             // 7
//             dup1 __FUNC_SIG(balanceOf)          eq balanceOfJump        jumpi

//             // 8
//             dup1 __FUNC_SIG(nonces)             eq noncesJump           jumpi

//             // 9
//             dup1 __FUNC_SIG(symbol)             eq symbolJump           jumpi

//             not_found jump

//         pivot11:

//             // 10
//             dup1 __FUNC_SIG(transfer)           eq transferJump         jumpi

//             // 11
//             dup1  __FUNC_SIG(permit)             eq permitJump           jumpi

//             // 12
//             dup1 __FUNC_SIG(allowance)          eq allowanceJump        jumpi

//     not_found:

//     // Revert if no match is found.
//     0x00 dup1 revert

//     allowanceJump:
//         ALLOWANCE()
//     approveJump:
//         APPROVE()
//     balanceOfJump:
//         BALANCE_OF()
//     decimalsJump:
//         DECIMALS()
//     domainSeparatorJump:
//         DOMAIN_SEPARATOR()
//     nameJump:
//         NAME()
//     noncesJump:
//         NONCES()
//     permitJump:
//         PERMIT()
//     symbolJump:
//         SYMBOL()
//     totalSupplyJump:
//         TOTAL_SUPPLY()
//     transferFromJump:
//         TRANSFER_FROM()
//     transferJump:
//         TRANSFER()
// }